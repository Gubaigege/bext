{"type":"javascript","options":{},"source":"import { runOnce } from '@bext/util';\nimport { getBextBar } from '@bext/ui';\n\nrunOnce(() => {\n    let bodys = document.querySelectorAll('html, body, main');\n    if (!window.bextBar) getBextBar();\n    bextBar.add('scrollby_top', {\n        text: '⬆',\n        callback: () => {\n            bodys.forEach(bo => {\n                if (!bo.scrollTo) {\n                    bo.scrollTop = 0;\n                } else {\n                    bo.scrollTo({\n                        top: 0,\n                        behavior: 'smooth'\n                    })\n                }\n            })\n        },\n        textcolor: 'white',\n        backcolor: 'turquoise'\n    });\n    bextBar.add('scrollby_bottom', {\n        text: '⬇',\n        callback: () => {\n            bodys.forEach(bo => {\n                if (!bo.scrollTo) {\n                    bo.scrollTop = parseInt(getComputedStyle(bo).height);\n                } else {\n                    bo.scrollTo({\n                        top: parseInt(getComputedStyle(bo).height),\n                        behavior: 'smooth'\n                    })\n                }\n            })\n        },\n        textcolor: 'white',\n        backcolor: 'turquoise'\n    });\n})","name":"到顶到底 低配版","version":"2","tags":["工具脚本"],"synopsis":"到顶到底 低配版，依赖 bextBar","build":"(function () {\n  'use strict';\n\n  const id = decodeURIComponent('98776');\n\n  function runOnce(fn) {\n    const uniqId = 'BEXT_UNIQ_ID_' + id;\n    if (window[uniqId]) {\n      return;\n    }\n    window[uniqId] = true;\n    fn && fn();\n  }\n\n  \n  function getBextBar() {\n      if (!window.bextBar) {\n          let bar = document.querySelector('#bextBar'), sty,\n              buttons = [], drag = null, pos = [], downPos = 0,\n              first, unlock = () => document.onmousemove = null,\n              ghost, ghostbox = document.createElement('div'),\n              isObj = o => (typeof o =='object' && !(o instanceof Array || o instanceof Function)),\n              optCheck = (opt,strict) => {\n                if (!isObj(opt) || (!opt.backcolor && !opt.textcolor && !opt.text && !opt.callback)) return 2;\n                if ((strict || opt.text) && (typeof opt.text !== 'string' || opt.text == '')) return 3;\n                if ((strict || opt.callback) && typeof opt.callback !== 'function') return 4;\n                if ((strict || opt.backcolor) && (typeof opt.backcolor !== 'string' || opt.backcolor == '')) return 5;\n                if ((strict || opt.textcolor) && (typeof opt.textcolor !== 'string' || opt.textcolor == '')) return 6;\n                return 0;\n              };\n\n          bar = document.createElement('div');\n          sty = document.createElement('style');\n          first = document.createElement('div');\n          first.id = 'bextBarExpand';\n          first.onclick = function(e) {\n              if ('ontouchend' in document || Math.abs(downPos - (e.clientX * e.clientY)) <= 25) bar.classList.toggle('close');\n          };\n          if ('ontouchend' in document) {\n              first.addEventListener('touchstart', function(e) {\n                  pos = [\n                      (e.touches[0].clientX - bar.offsetLeft),\n                      (e.touches[0].clientY - bar.offsetTop)\n                  ];\n              }, { passive: true });\n              first.addEventListener('touchmove', function(e) {\n                  bar.style.left = (e.touches[0].clientX - pos[0]) + 'px';\n                  bar.style.top = (e.touches[0].clientY - pos[1]) + 'px';\n              }, { passive: true });\n          } else {\n              first.addEventListener('mousedown', function(e) {\n                  pos = [\n                      (e.clientX - bar.offsetLeft),\n                      (e.clientY - bar.offsetTop)\n                  ];\n                  downPos = e.clientX * e.clientY;\n                  document.onmousemove = function(e) {\n                      if (Math.abs(downPos - (e.clientX * e.clientY)) > 50) {\n                          bar.style.left = (e.clientX - pos[0]) + 'px';\n                          bar.style.top = (e.clientY - pos[1]) + 'px';\n                      }\n                  };\n                  document.removeEventListener('mouseup', unlock);\n                  document.addEventListener('mouseup', unlock);\n              });\n          }\n          bar.appendChild(first);\n          sty.innerText = `\n        #bextBar {\n            position: fixed;\n            display: block;\n            max-width: 80vw;\n            height: max-content;\n            top: calc(95vh - 110px);\n            margin: 5px;\n            padding: 2px;\n            background: white;\n            border-radius: 5px;\n            z-index: 1000000;\n            box-shadow: 0 2px 5px gray;\n            user-select: none;\n        }\n        #bextBar.close {\n            width: 23px;\n            height: 33px;\n            overflow: clip;\n        }\n        #bextBarExpand {\n            margin: 8px;\n            margin-right: 0;\n            border-width: 4px 0 0 4px;\n            border-color: #333 transparent transparent #333;\n            border-style: solid none none solid;\n            width: 13px;\n            height: 13px;\n            transform: rotate(315deg);\n            float: left;\n        }\n        #bextBar.close #bextBarExpand {\n            transform: rotate(135deg);\n            margin-left: 0px;\n        }\n        .bextButton {\n            margin: 4px .5em;\n            padding: 4px .75em;\n            background: whitesmoke;\n            border: none;\n            outline: none;\n            border-radius: 1em;\n            font-size: 13px;\n            line-height: 13px;\n            width: auto;\n            box-shadow: 0 2px 2px lightgray;\n            transition: opacity .5s;\n        }\n        .bextButton span {\n            margin: .125rem;\n            display: inline;\n        }\n        .delButton {\n            font-family: sans-serif;\n        }\n        .ghost {\n            opacity: 0.5;\n        }\n        #bextGhostBox {\n            position: fixed;\n            left: -150%;\n            top: -150%;\n            background: transparent;\n            z-index: 1000001;\n        }\n        #bextGhost {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: max-content;\n            opacity: 2;\n        }`;\n          document.head.appendChild(sty); bar.id = 'bextBar';\n          document.body.appendChild(bar);\n          ghostbox.id = 'bextGhostBox';\n          document.body.appendChild(ghostbox);\n\n          window.bextBar = {\n              bar, buttons,\n              del: function (id) {\n                  if (!bextBar.buttons.includes(id)) return 1;\n                  let button = this.bar.querySelector(`#bextButton-${id}`);\n                  if (button) this.bar.removeChild(button);\n                  bextBar.buttons.splice(bextBar.buttons.indexOf(id), 1);\n                  return 0;\n              },\n              query: function (id) {\n                if (!bextBar.buttons.includes(id)) return 1;\n                let button = this.bar.querySelector(`#bextButton-${id}`);\n                return {\n                    button: button,\n                    text: button.querySelector('span').innerText,\n                    backcolor: button.style.backgroundColor,\n                    textcolor: button.style.color\n                }\n              },\n              change: function (id, opt) {\n                  if (!bextBar.buttons.includes(id)) return 1;\n                  let optret = optCheck(opt,false);\n                  if (optret!==0) return optret;\n                  let button = this.bar.querySelector(`#bextButton-${id}`);\n                  if (button) {\n                      if (opt.textcolor) button.style.color = opt.textcolor;\n                      if (opt.backcolor) button.style.backgroundColor = opt.backcolor;\n                      if (opt.text) button.querySelector('span').innerText = opt.text;\n                      if (opt.callback) button.onclick = opt.callback.bind(window,this,button);\n                      return 0;\n                  }\n              },\n              add: function (id, opt) {\n                  if (!id || !isObj(opt)) return 1;\n                  opt = Object.assign({\n                      text: '按钮',\n                      backcolor: 'whitesmoke',\n                      textcolor: '#333'\n                  }, opt);\n                  if (typeof id !== 'string') return 7;\n                  let optret = optCheck(opt,true);\n                  if (optret!==0) return optret;\n                  if (!this.bar.querySelector(`#bextButton-${id}`)) {\n                      let button = document.createElement('button'),\n                          btext = document.createElement('span'),\n                          switchBtn = function (frombtn, tobtn) {\n                              let a = document.createElement('a');\n                              tobtn.insertAdjacentElement('beforeBegin', a);\n                              frombtn.insertAdjacentElement('beforeBegin', tobtn);\n                              a.insertAdjacentElement('beforeBegin', frombtn);\n                              tobtn.parentNode.removeChild(a);\n                          }, idBtn = id => bar.querySelector(`#bextButton-${id}`),\n                          switchArr = (fromid, toid) => {\n                              let fromPos = bextBar.buttons.indexOf(fromid),\n                                  toPos = bextBar.buttons.indexOf(toid);\n                              bextBar.buttons[toPos] = fromid;\n                              bextBar.buttons[fromPos] = toid;\n                          },\n                          shuffleBtn = function (frombtn, tobtn) {\n                              let fromid = frombtn.id.slice(11), toid = tobtn.id.slice(11),\n                                  fromPos = bextBar.buttons.indexOf(fromid), toPos = bextBar.buttons.indexOf(toid),\n                                  movePos = Math.max(fromPos, toPos) - Math.min(fromPos, toPos);\n                              if (movePos > 1) {\n                                  if (fromPos > toPos) {\n                                      for (let i = fromPos; i > toPos; i--) {\n                                          switchBtn(idBtn(bextBar.buttons[i]), idBtn(bextBar.buttons[i - 1]));\n                                          switchArr(bextBar.buttons[i], bextBar.buttons[i - 1]);\n                                      }\n                                  } else {\n                                      for (let i = fromPos; i < toPos; i++) {\n                                          switchBtn(idBtn(bextBar.buttons[i]), idBtn(bextBar.buttons[i + 1]));\n                                          switchArr(bextBar.buttons[i], bextBar.buttons[i + 1]);\n                                      }\n                                  }\n                              } else {\n                                  switchBtn(frombtn, tobtn);\n                                  switchArr(fromid, toid);\n                              }\n                          };\n                      button.id = `bextButton-${id}`;\n                      button.className = 'bextButton';\n                      button.draggable = true;\n                      button.appendChild(btext);\n                      bextBar.buttons.push(id);\n                      if ('ontouchend' in document) {\n                          button.addEventListener('touchstart', e => {\n                              ghostbox.innerHTML = '';\n                              ghost = document.importNode(e.currentTarget, true);\n                              ghost.id = 'bextGhost';\n                              ghostbox.appendChild(ghost);\n                          });\n                          button.addEventListener('touchmove', e => {\n                              let ghostWidth = parseInt(getComputedStyle(e.currentTarget).width),\n                                  ghostHeight = parseInt(getComputedStyle(e.currentTarget).height);\n                              e.currentTarget.classList.add('ghost');\n                              ghost.style.opacity = 0.5;\n                              ghostbox.style.left = (e.touches[0].clientX - ghostWidth / 2) + 'px';\n                              ghostbox.style.top = (e.touches[0].clientY - ghostHeight - 10) + 'px';\n                              drag = e.currentTarget;\n                          });\n                          button.addEventListener('touchend', e => {\n                              let target = document.elementFromPoint(\n                                  e.changedTouches[0].clientX,\n                                  e.changedTouches[0].clientY\n                              );\n                              if (target.tagName=='SPAN') target = target.parentNode;\n                              if (drag && target.className.includes('bextButton') && drag != target) {\n                                  shuffleBtn(drag, target);\n                              }\n                              bextBar.bar.querySelectorAll('.bextButton').forEach( btn => btn.classList.remove('ghost'));\n                              ghostbox.style.top = ghostbox.style.bottom = '-150%';\n                              drag = null;\n                          });\n                      } else {\n                          button.addEventListener('dragstart', e => {\n                              e.target.classList.add('ghost');\n                              ghostbox.innerHTML = '';\n                              ghost = document.importNode(e.currentTarget, true);\n                              ghost.id = 'bextGhost';\n                              ghostbox.appendChild(ghost);\n                              if (e.dataTransfer.mozCursor) {\n                                  e.dataTransfer.setDragImage(ghost, -25, -75);\n                              } else {\n                                  e.dataTransfer.setDragImage(ghost, 25, 25);\n                              }\n                              drag = e.currentTarget;\n                          });\n                          button.addEventListener('dragover', e => e.preventDefault());\n                          button.addEventListener('dragend', () => {\n                              bextBar.bar.querySelectorAll('.button').forEach(\n                                  b => b.classList.remove('ghost')\n                              );\n                          });\n                          button.addEventListener('drop', e => {\n                              e.preventDefault();\n                              if (drag != e.currentTarget) {\n                                  shuffleBtn(drag, e.currentTarget);\n                              }\n                              drag.classList.remove('ghost');\n                              drag = e.currentTarget;\n                          });\n                      }                    \n                      \n                      let close = document.createElement('span');\n                      close.innerText = '✖'; close.className = 'delButton';\n                      close.onclick = e => {\n                          e.stopPropagation();\n                          bextBar.del(id);\n                      };\n                      button.appendChild(close);\n                      this.bar.appendChild(button);\n                      let change = this.change(id, opt);\n                      if (change!=0) this.del(id);\n                      return change;\n                  } else return 10;\n              }\n          };\n      }\n      return window.bextBar;\n  }\n\n  runOnce(() => {\n      let bodys = document.querySelectorAll('html, body, main');\n      if (!window.bextBar) getBextBar();\n      bextBar.add('scrollby_top', {\n          text: '⬆',\n          callback: () => {\n              bodys.forEach(bo => {\n                  if (!bo.scrollTo) {\n                      bo.scrollTop = 0;\n                  } else {\n                      bo.scrollTo({\n                          top: 0,\n                          behavior: 'smooth'\n                      });\n                  }\n              });\n          },\n          textcolor: 'white',\n          backcolor: 'turquoise'\n      });\n      bextBar.add('scrollby_bottom', {\n          text: '⬇',\n          callback: () => {\n              bodys.forEach(bo => {\n                  if (!bo.scrollTo) {\n                      bo.scrollTop = parseInt(getComputedStyle(bo).height);\n                  } else {\n                      bo.scrollTo({\n                          top: parseInt(getComputedStyle(bo).height),\n                          behavior: 'smooth'\n                      });\n                  }\n              });\n          },\n          textcolor: 'white',\n          backcolor: 'turquoise'\n      });\n  });\n\n})();\n","detail":""}